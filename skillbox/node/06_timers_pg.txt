7. Базы данных, Реляционные ДБ


Вы уже перенесли код для таймеров. Отлично, часть работы уже сделана!

Вы можете начать с добавления рутов для аутентификации. Вначале вы можете не использовать данные из базы, а добавить их уже на следующем шаге.

----------

Отлично! Вы добавили код для аутентификации!

Следующим шагом будет добавление хеша и разделение кода на части.
Помните задание из 03_hash? Логика та же)) Выведите часть кода отвечающая за создание хеша в функцию, которая будет храниться в отдельном файле. То же самое сделайте с рутами для аутентификации и таймерами используя router.

    Логика простая: пользователь вводит пароль в форме на сайте и crypto его преобразует в набор случайных символов, которые трудно запомнить и трудно взломать, и сравнивает с точно таким же хешем пароля из базы.

    Здесь пароль введенный пользователем сравнивается с паролем из базы. Тут вам нужно заменить переменную с паролем на переменную содержащую хеш пароля.

    Отлично! Теперь используйте хеш пароля при сравнении паролей в руте /login.

------------------


Все верно! Следующим шагом нужно сделать логику регистрации /signup, но теперь из введенного пароля нужно создать хеш, который будет и записан в базу вместо самого пароля.

    Код верный, только не забудьте что вы в руте /signup сохраняете в базу сам пароль, а не хеш. Создайте его на основе пароля и сохраните хеш в базе и мы перейдем к следующему шагу.

        Knex.insert() сохраняет нового пользователя. В параметры этой функции и нужно передать хешированный пароль.

    Теперь нужно добавить в /signup проверку существует ли пользователь с таким логином перед добавлением нового. Проверка такая же как и в /login.

    На следующем шаге, нужно получить id созданого пользователя и создать для него сессию.

    А теперь выведите повторяющийся код для создания хеша в отдельную функцию. Поместите эту функцию в отдельный файл и экспортируйте его в index.js
