4. Решаем базовые задачи

- trim()
- не срабатывает для jpg файлов

    Попробуйте добавить в запрос для файлов следующую опцию:
    axios.get(filePath, { responseType: 'arraybuffer'}

----------
Тесты для основного задания выполняются, а вот тесты для бонусной имеют ошибки. Хотите исправить или сдать только основную часть?

-----------------
Получить и сохранить в переменную содержимое файла (readFile или readFileSync). Проверить значение этой переменной и, в случае ошибки, выйти из скрипта с помощью кода 100.

--------------

Получите точно также файл .sha256, но в этом случае код ошибки будет 101.
---------------

Создайте хеш с помощью библиотеки crypto.


-------------------
БОНУС:
-------------------

Запросы к файлам в интернете всегда асинхронны.

Один из вариантов решения бонусной части - выполнить оба запроса одновременно с помощью Promise.all. И после получения файлов сравнить их.

    Это хороший вопрос)) Да вы правы, логика скрипта должна быть такой. Ну а Promise.all в плане конструкции чуть проще, поэтому я ее рекомендую в самом начале если возникают трудности с реализацией. И мне нравится что вы стараетесь проникнуть в суть работы скрипта)))

-------------------

Можно создать логику скрипта для бонусной части так, что бы работа скрипта "замораживалась" пока не отработает сам запрос. Это можно сделать с помощью конструкции async/await:

async function fetchFileFromNet(url) {
  const file = await yourAsyncFn(url);

  return file;
}

      Должно быть так:
      1) В async функции вы создаете логику для запроса к переменную.
      2) Вызываете async функцию и сохраняете результат в переменную.
      3) Делаете то же самое для файла хеша
      4) Создаете и сравниваете хеши


            Примерно вот так:

            async function fetchFileFromNet(url) {
              const file = await fetch(url);

              return file;
            }

            const file = fetchFileFromNet(url);
